#include<iostream>
#include<stdio.h>

using namespace std;
struct node{
	int val = 0;
	struct node *left, *right;
}*start = NULL;
struct node* create(int x){
	struct node *temp = new node;
	temp->val = x;
	temp->left = temp->right = NULL;
	return temp;
}

struct node *search(struct node *temp, int x)
 { 
	if (temp->val > x ){
		if (temp->left== NULL ) return temp->left = create(x);
		else	return search(temp->left, x);
		
	}
	else {
		if (temp->val <= x){
			if (temp->right == NULL) return temp->right = create(x);
			else return search(temp->right, x);
		}
		
	}
	
 }
void insert(int x)
 {
	if (start != NULL){
		search(start , x);
	}
	else start = create(x);

 }

void inorder(struct node* root){
	if (root == NULL) return;
	inorder(root->left);
	printf("%d ->", root->val);
	inorder(root->right);
}

void preorder(struct node* root){
	if (root == NULL) return;
	printf("%d ->", root->val);
	preorder(root->left);
	preorder(root->right);
}

void postorder(struct node* root) {
	if (root == NULL) return;
	postorder(root->left);
	postorder(root->right);
	printf("%d ->", root->val);
}

int main(){
	char c = 'y';
	int x;
	while (c == 'y' || c == 'Y'){
		cout << "Enter the element to insert in the tree\n";
		scanf("%d", &x);
		insert(x);
		cout << "If want to insert new element then type Y:\n";
		cin >> c;
	}
	inorder(start);
	cout << endl;
	preorder(start);
	cout << endl;
	postorder(start);
	cout << endl;
	return 0;
}
